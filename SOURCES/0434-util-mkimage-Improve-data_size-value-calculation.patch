From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peter Jones <pjones@redhat.com>
Date: Fri, 26 Feb 2021 01:27:42 +0100
Subject: [PATCH] util/mkimage: Improve data_size value calculation

According to "Microsoft Portable Executable and Common Object File Format
Specification", the Optional Header SizeOfInitializedData field contains:

  Size of the initialized data section, or the sum of all such sections if
  there are multiple data sections.

Make this explicit by adding the GRUB kernel data size to the sum of all
the modules sizes. The ALIGN_UP() is not required by the PE spec but do
it to avoid alignment issues.

Signed-off-by: Peter Jones <pjones@redhat.com>
Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
---
 util/mkimage.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/util/mkimage.c b/util/mkimage.c
index ca88b0ff96a..f23fceef8f7 100644
--- a/util/mkimage.c
+++ b/util/mkimage.c
@@ -1417,6 +1417,7 @@ grub_install_generate_image (const char *dir, const char *prefix,
 	void *pe_img;
 	grub_uint8_t *header;
 	void *sections;
+	size_t scn_size;
 	size_t pe_size;
 	struct grub_pe32_coff_header *c;
 	struct grub_pe32_section_table *text_section, *data_section;
@@ -1519,7 +1520,10 @@ grub_install_generate_image (const char *dir, const char *prefix,
 						| GRUB_PE32_SCN_MEM_EXECUTE
 						| GRUB_PE32_SCN_MEM_READ);
 
-	PE_OHDR (o32, o64, data_size) = grub_host_to_target32 (reloc_addr - exec_size - header_size);
+	scn_size = ALIGN_UP (kernel_size - exec_size, GRUB_PE32_FILE_ALIGNMENT);
+	PE_OHDR (o32, o64, data_size) = grub_host_to_target32 (scn_size +
+							       ALIGN_UP (total_module_size,
+
 
 	data_section = text_section + 1;
 	strcpy (data_section->name, ".data");
